// Hilbert Cube | Denis Bredelet

var segm = 4;

/**
 * coverFRD
 * Trace all points inside a cube which has current vector as edge
 * Directions: Front, Right, Down
 */
function coverFRD(step)
{
  step--;
  t. turn(-90). bank(90); coverFRD2(step);
  t. move(segm). bank(-90). turn(90); coverFDR2(step);
  t. move(segm). bank(-90). turn(90); coverFDR2(step);
  t. move(segm). bank(-90). turn(90); coverFDR2(step);
  t. bank(90). turn(90). move(segm). turn(90). bank(-90);
  coverFRD2(step);
  t. move(segm); coverFDR2(step);
  t. bank(-90). turn(-90). move(segm); coverFDR2(step);
  t. bank(-90). turn(-90). move(segm); coverFRD2(step);
  t. turn(90). bank(90);
}

/**
 * coverFRD2
 * Trace all points inside a cube which has current vector as edge
 * Directions: Front, Right, Down
 * Alternate coverage of smaller cubes to avoid multi-segment joints
 */
function coverFRD2(step)
{
  if (step > 0)
  {
    t. turn(-90). bank(90); coverFDR(step);
    t. move(segm). bank(-90). turn(90); coverFRD(step);
    t. move(segm). bank(-90). turn(90); coverFRD(step);
    t. move(segm). bank(-90). turn(90); coverFRD(step);
    t. bank(90). turn(90). move(segm). turn(90). bank(-90); coverFDR(step);
    t. move(segm); coverFRD(step);
    t. bank(-90). turn(-90). move(segm); coverFRD(step);
    t. bank(-90). turn(-90). move(segm); coverFDR(step);
    t. turn(90). bank(90);
  }
  else
  {
    coverFRDs();
  }
}

/**
 * coverFDR
 * Trace all points inside a cube which has current vector as edge
 * Directions: Front, Down, Right
 */
function coverFDR(step)
{
  step--;
  t.  bank(-90). turn(90); coverFDR2(step);
  t. move(segm). turn(-90). bank(90); coverFRD2(step);
  t. move(segm). turn(-90). bank(90); coverFRD2(step);
  t. move(segm). turn(-90). bank(90); coverFRD2(step);
  t. turn(90). move(segm). turn(90); coverFDR2(step);
  t. move(segm); coverFRD2(step);
  t. turn(90). bank(90). move(segm); coverFRD2(step);
  t. turn(90). bank(90). move(segm); coverFDR2(step);
  t. bank(-90). turn(-90);
}

/**
 * coverFDR2
 * Trace all points inside a cube which has current vector as edge
 * Directions: Front, Down, Right
 * Alternate coverage of smaller cubes to avoid multi-segment joints
 */
function coverFDR2(step)
{
  if (step > 0)
  {
    t. bank(-90). turn(90); coverFRD(step);
    t. move(segm). turn(-90). bank(90); coverFDR(step);
    t. move(segm). turn(-90). bank(90); coverFDR(step);
    t. move(segm). turn(-90). bank(90); coverFDR(step);
    t. turn(90). move(segm). turn(90); coverFRD(step);
    t. move(segm); coverFDR(step);
    t. turn(90). bank(90). move(segm); coverFDR(step);
    t. turn(90). bank(90). move(segm); coverFRD(step);
    t. bank(-90). turn(-90);
  }
  else
  {
    coverFDRs();
  }
}

/**
 * coverFRDs
 * Trace all points inside a small cube which has current vector as edge
 * Directions: Front, Right, Down
 */
function coverFRDs()
{
  t. with_pen({color: "#A5F", opacity: .7});
  t. turn(-90). move(segm);
  t. turn(90). move(segm);
  t. bank(-90). turn(90). move(segm);
  t. turn(90). move(segm);
  t. bank(90). turn(90). move(segm);
  t. turn(90). move(segm);
  t. bank(-90). turn(90). move(segm);
  t. turn(-90). bank(-90);
}

/**
 * coverFDRs
 * Trace all points inside a small cube which has current vector as edge
 * Directions: Front, Down, Right
 */
function coverFDRs()
{
  t. with_pen({color: "#FD4", opacity: .7});
  t. bank(90). turn(-90). move(segm);
  t. turn(90). move(segm);
  t. bank(90). turn(90). move(segm);
  t. turn(90). move(segm);
  t. bank(-90). turn(90). move(segm);
  t. turn(90). move(segm);
  t. bank(90). turn(90). move(segm);
  t. turn(-90);
}

t.pitch(90);
t.jump(200);
t.bank(-60);
coverFRD(2);
